#!/bin/bash

. /usr/share/fog/lib/funcs.sh

sysuuid=$(dmidecode -s system-uuid)
sysuuid=${sysuuid,,}
mac=$(getMACAddresses)
base64mac=$(echo $mac | base64)

token=""
function getHInfo() {
    echo "Fetching tasks for $mac from $web"
    
    token=$(curl -Lks --data "mac=$base64mac" "${web}status/hostgetkey.php")
    
    echo "Actual token: $token"
    
    usleep $((5 * 1000000))
    if [[ -z $token ]]; then
        echo "NO TOKEN, than set "
        usleep $((5 * 1000000))
        token="Invalid Tasking"
    fi

    if [[ ! "$token" =~ Invalid* ]]; then
        echo "Pulling tasks"
        curl -Lks -o /tmp/hinfo.txt --data "sysuuid=${sysuuid}&mac=$mac&hosttoken=${token}" "${web}service/hostinfo.php" -A ''
    fi;
}

usleep $((5 * 1000000))
getHInfo

while [[ "$token" == "Invalid Host" ]]; do
    echo "Host $mac is not registered, starting Quick Registration"
    
    fog.auto.reg

    getHInfo
done

echo ""
dots "Registred host name"
curl -Lks --data "mac=$mac" "${web}service/ipxe/boot.php" | grep 'item --gap Host is registered as' | sed -E 's/^item\s--gap\sHost\sis\sregistered\sas\s(.*)\!$/\1/' 
usleep $((5 * 1000000))

getHInfo

while [[ "$token" == "Invalid Tasking" ]]; do
    usleep $((5 * 1000000))
    getHInfo
done

echo "A new task has been fetched with options"
sed -E 's/^\[\[\s-z\s\$\w+ \]\]\s\&\&\sexport\s(\w+)=(.+)$/\1=\2/' /tmp/hinfo.txt | awk '{print}' ORS=' '

usleep $((3 * 1000000))

[[ -f /tmp/hinfo.txt ]] && sed -E 's/^\[\[\s-z\s\$\w+ \]\]\s\&\&\s(.+)$/\1/' /tmp/hinfo.txt > /tmp/hinfo-patched.txt
[[ -f /tmp/hinfo.txt ]] && . /tmp/hinfo-patched.txt

fog
